# Local development purposes only.

x-snowflake-loader-common: &snowflake-loader-common
  image: snowflake-loader:production
  build:
    context: load_via_python_api/
    target: production
    tags:
      - 'snowflake-loader:production'
  environment:
    LOG_LEVEL: ${LOG_LEVEL}
    NUMBER_OF_CUSTOMER: ${NUMBER_OF_CUSTOMERS}
    CUSTOMER_TABLE: ${CUSTOMER_TABLE}
    CUSTOMER_JSON_FORMAT: ${CUSTOMER_JSON_FORMAT}
    BULK_COPY_WAREHOUSE: ${BULK_COPY_WAREHOUSE}
    LOAD_STREAM_WAREHOUSE: ${LOAD_STREAM_WAREHOUSE}
    BULK_LOAD_ROLE: ${BULK_LOAD_ROLE}
    STREAMING_DATA_ROLE: ${STREAMING_DATA_ROLE}
    SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
  secrets:
    - SNOWFLAKE_USER
    - SNOWFLAKE_ACCOUNT
    - SNOWFLAKE_PRIVATE_KEY
    - SNOWFLAKE_DATABASE
  volumes:
    - ./load_via_python_api/src:/app/src

services:
  init-snowflake:
    <<: *snowflake-loader-common
    command: --mode init_job init_job

  bulk-data-loader:
    <<: *snowflake-loader-common
    depends_on:
      init-snowflake:
        condition: service_completed_successfully
    command: --mode run

  kafka-producer:
    image: nodejs-kafka-client:production
    build:
      context: . # NOTE: Need access to shared schemas so build from repo root.
      dockerfile: load_via_kafka/Dockerfile
      target: production
      tags:
        - 'nodejs-kafka-client:production'
    environment:
      TOPIC: ${TOPIC}
      MODE: produce
      LOG_LEVEL: ${LOG_LEVEL}
    secrets:
      - PRIMARY_CONNECTION_STRING

  kafka-consumer:
    depends_on:
      kafka-producer:
        condition: service_completed_successfully
    image: nodejs-kafka-client:production
    build:
      context: . # NOTE: Need access to shared schemas so build from repo root.
      dockerfile: load_via_kafka/Dockerfile
      target: production
      tags:
        - 'nodejs-kafka-client:production'
    environment:
      TOPIC: ${TOPIC}
      MODE: consume
      LOG_LEVEL: ${LOG_LEVEL}
    secrets:
      - PRIMARY_CONNECTION_STRING

  init-properties-files:
    depends_on:
      kafka-producer:
        condition: service_completed_successfully
    image: snowpipe-streaming-connector:os-only
    build:
      context: kafka_connector/
      target: os_only
      tags:
        - 'snowpipe-streaming-connector:os-only'
    volumes:
      - ./kafka_connector/properties:/tmp/shared-properties
      - ./kafka_connector/init-properties-files.sh:/init-property-files/init-properties-files.sh
      - ./snowflake_streaming_attributes.json:/tmp/snowflake-streaming-attributes.json
      # For sharing properties with the snowpipe-streaming-connector service.
      - shared-properties:/shared-properties
    environment:
      LOAD_STREAM_WAREHOUSE: ${LOAD_STREAM_WAREHOUSE}
      STREAMING_DATA_ROLE: ${STREAMING_DATA_ROLE}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
      TOPIC: ${TOPIC}
    secrets:
      - PRIMARY_CONNECTION_STRING
      - BOOTSTRAP_SERVER
      - SNOWFLAKE_ACCOUNT
      - SNOWFLAKE_USER
      - SNOWFLAKE_PRIVATE_KEY
      - SNOWFLAKE_DATABASE
    entrypoint: 'sh init-property-files/init-properties-files.sh'

  snowpipe-streaming-connector:
    depends_on:
      init-properties-files:
        condition: service_completed_successfully
    image: snowpipe-streaming-connector:snowpipe_streaming_connector
    build:
      context: kafka_connector/
      target: snowpipe_streaming_connector
      tags:
        - 'snowpipe-streaming-connector:snowpipe_streaming_connector'
    volumes:
      - shared-properties:/shared-properties
    command:
      - sh
      - -c
      - |
        cp /shared-properties/*.properties /opt/kafka/config/ &&
        bin/connect-standalone.sh \
        config/connect-standalone.properties \
        config/snowflake-event-hub-connector.properties

volumes:
  shared-properties:

secrets:
  PRIMARY_CONNECTION_STRING:
    environment: PRIMARY_CONNECTION_STRING
  BOOTSTRAP_SERVER:
    environment: BOOTSTRAP_SERVER
  SNOWFLAKE_USER:
    environment: SNOWFLAKE_USER
  SNOWFLAKE_ACCOUNT:
    environment: SNOWFLAKE_ACCOUNT
  SNOWFLAKE_PRIVATE_KEY:
    environment: SNOWFLAKE_PRIVATE_KEY
  SNOWFLAKE_DATABASE:
    environment: SNOWFLAKE_DATABASE
